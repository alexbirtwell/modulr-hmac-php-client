<?php
/**
 * BatchPaymentResponse.
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swaagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Modulr API.
 *
 * Modulo API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrowdProperty\ModulrHmacPhpClient\Model;

use ArrayAccess;

/**
 * BatchPaymentResponse Class Doc Comment.
 *
 * @category    Class
 *
 * @author      Swagger Codegen team
 *
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BatchPaymentResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'BatchPaymentResponse';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'batch_reference'    => 'string',
        'external_reference' => 'string',
        'id'                 => 'string',
        'payment_responses'  => '\CrowdProperty\ModulrHmacPhpClient\Model\PaymentResponse[]',
        'status'             => 'string',
        'summary'            => 'object',
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'batch_reference'    => 'batchReference',
        'external_reference' => 'externalReference',
        'id'                 => 'id',
        'payment_responses'  => 'paymentResponses',
        'status'             => 'status',
        'summary'            => 'summary',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'batch_reference'    => 'setBatchReference',
        'external_reference' => 'setExternalReference',
        'id'                 => 'setId',
        'payment_responses'  => 'setPaymentResponses',
        'status'             => 'setStatus',
        'summary'            => 'setSummary',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'batch_reference'    => 'getBatchReference',
        'external_reference' => 'getExternalReference',
        'id'                 => 'getId',
        'payment_responses'  => 'getPaymentResponses',
        'status'             => 'getStatus',
        'summary'            => 'getSummary',
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_ACCEPTED = 'ACCEPTED';
    const STATUS_REJECTED = 'REJECTED';
    const STATUS_SUBMITTED = 'SUBMITTED';

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACCEPTED,
            self::STATUS_REJECTED,
            self::STATUS_SUBMITTED,
        ];
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['batch_reference'] = isset($data['batch_reference']) ? $data['batch_reference'] : null;
        $this->container['external_reference'] = isset($data['external_reference']) ? $data['external_reference'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['payment_responses'] = isset($data['payment_responses']) ? $data['payment_responses'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['payment_responses'] === null) {
            $invalid_properties[] = "'payment_responses' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        $allowed_values = ['ACCEPTED', 'REJECTED', 'SUBMITTED'];
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of 'ACCEPTED', 'REJECTED', 'SUBMITTED'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['payment_responses'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowed_values = ['ACCEPTED', 'REJECTED', 'SUBMITTED'];
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }

        return true;
    }

    /**
     * Gets batch_reference.
     *
     * @return string
     */
    public function getBatchReference()
    {
        return $this->container['batch_reference'];
    }

    /**
     * Sets batch_reference.
     *
     * @param string $batch_reference
     *
     * @return $this
     */
    public function setBatchReference($batch_reference)
    {
        $this->container['batch_reference'] = $batch_reference;

        return $this;
    }

    /**
     * Gets external_reference.
     *
     * @return string
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference.
     *
     * @param string $external_reference
     *
     * @return $this
     */
    public function setExternalReference($external_reference)
    {
        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payment_responses.
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\PaymentResponse[]
     */
    public function getPaymentResponses()
    {
        return $this->container['payment_responses'];
    }

    /**
     * Sets payment_responses.
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\PaymentResponse[] $payment_responses
     *
     * @return $this
     */
    public function setPaymentResponses($payment_responses)
    {
        $this->container['payment_responses'] = $payment_responses;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param string $status Current status of batch. Can be one of
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = ['ACCEPTED', 'REJECTED', 'SUBMITTED'];
        if ((!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'ACCEPTED', 'REJECTED', 'SUBMITTED'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets summary.
     *
     * @return object
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary.
     *
     * @param object $summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}
