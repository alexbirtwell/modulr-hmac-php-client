<?php
/**
 * WebHookFailureResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrowdProperty\ModulrHmacPhpClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Modulr API
 *
 * Modulo API
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrowdProperty\ModulrHmacPhpClient\Model;

use \ArrayAccess;

/**
 * WebHookFailureResponse Class Doc Comment
 *
 * @category    Class
 * @package     CrowdProperty\ModulrHmacPhpClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class WebHookFailureResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'WebHookFailureResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_bid' => 'string',
        'data' => 'object',
        'event_name' => 'string',
        'last_failed_time' => '\DateTime',
        'retry' => 'bool',
        'url' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_bid' => 'customerBid',
        'data' => 'data',
        'event_name' => 'eventName',
        'last_failed_time' => 'lastFailedTime',
        'retry' => 'retry',
        'url' => 'url'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'customer_bid' => 'setCustomerBid',
        'data' => 'setData',
        'event_name' => 'setEventName',
        'last_failed_time' => 'setLastFailedTime',
        'retry' => 'setRetry',
        'url' => 'setUrl'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'customer_bid' => 'getCustomerBid',
        'data' => 'getData',
        'event_name' => 'getEventName',
        'last_failed_time' => 'getLastFailedTime',
        'retry' => 'getRetry',
        'url' => 'getUrl'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const EVENT_NAME_PAYIN = 'PAYIN';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEventNameAllowableValues()
    {
        return [
            self::EVENT_NAME_PAYIN,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_bid'] = isset($data['customer_bid']) ? $data['customer_bid'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['event_name'] = isset($data['event_name']) ? $data['event_name'] : null;
        $this->container['last_failed_time'] = isset($data['last_failed_time']) ? $data['last_failed_time'] : null;
        $this->container['retry'] = isset($data['retry']) ? $data['retry'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['customer_bid'] === null) {
            $invalid_properties[] = "'customer_bid' can't be null";
        }
        if ($this->container['event_name'] === null) {
            $invalid_properties[] = "'event_name' can't be null";
        }
        $allowed_values = ["PAYIN"];
        if (!in_array($this->container['event_name'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'event_name', must be one of 'PAYIN'.";
        }

        if ($this->container['last_failed_time'] === null) {
            $invalid_properties[] = "'last_failed_time' can't be null";
        }
        if ($this->container['retry'] === null) {
            $invalid_properties[] = "'retry' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalid_properties[] = "'url' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['customer_bid'] === null) {
            return false;
        }
        if ($this->container['event_name'] === null) {
            return false;
        }
        $allowed_values = ["PAYIN"];
        if (!in_array($this->container['event_name'], $allowed_values)) {
            return false;
        }
        if ($this->container['last_failed_time'] === null) {
            return false;
        }
        if ($this->container['retry'] === null) {
            return false;
        }
        if ($this->container['url'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets customer_bid
     * @return string
     */
    public function getCustomerBid()
    {
        return $this->container['customer_bid'];
    }

    /**
     * Sets customer_bid
     * @param string $customer_bid Unique Identifier for the customer of this webhook.
     * @return $this
     */
    public function setCustomerBid($customer_bid)
    {
        $this->container['customer_bid'] = $customer_bid;

        return $this;
    }

    /**
     * Gets data
     * @return object
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     * @param object $data
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets event_name
     * @return string
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     * @param string $event_name Event which would trigger the webhook. Can be one of
     * @return $this
     */
    public function setEventName($event_name)
    {
        $allowed_values = array('PAYIN');
        if ((!in_array($event_name, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'event_name', must be one of 'PAYIN'");
        }
        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets last_failed_time
     * @return \DateTime
     */
    public function getLastFailedTime()
    {
        return $this->container['last_failed_time'];
    }

    /**
     * Sets last_failed_time
     * @param \DateTime $last_failed_time Last failure time.
     * @return $this
     */
    public function setLastFailedTime($last_failed_time)
    {
        $this->container['last_failed_time'] = $last_failed_time;

        return $this;
    }

    /**
     * Gets retry
     * @return bool
     */
    public function getRetry()
    {
        return $this->container['retry'];
    }

    /**
     * Sets retry
     * @param bool $retry Turn webhook retry mechanism on/off
     * @return $this
     */
    public function setRetry($retry)
    {
        $this->container['retry'] = $retry;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url Endpoint URL for receiving webhook data
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


