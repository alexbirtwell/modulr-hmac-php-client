<?php
/**
 * Associate
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrowdProperty\ModulrHmacPhpClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Modulr API
 *
 * Modulo API
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrowdProperty\ModulrHmacPhpClient\Model;

use \ArrayAccess;

/**
 * Associate Class Doc Comment
 *
 * @category    Class
 * @package     CrowdProperty\ModulrHmacPhpClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Associate implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Associate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'applicant' => 'bool',
        'date_of_birth' => 'string',
        'document_info' => '\CrowdProperty\ModulrHmacPhpClient\Model\Document[]',
        'email' => 'string',
        'first_name' => 'string',
        'home_address' => '\CrowdProperty\ModulrHmacPhpClient\Model\Address',
        'id' => 'string',
        'last_name' => 'string',
        'middle_name' => 'string',
        'ownership' => 'int',
        'phone' => 'string',
        'type' => 'string',
        'verification_status' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'applicant' => 'applicant',
        'date_of_birth' => 'dateOfBirth',
        'document_info' => 'documentInfo',
        'email' => 'email',
        'first_name' => 'firstName',
        'home_address' => 'homeAddress',
        'id' => 'id',
        'last_name' => 'lastName',
        'middle_name' => 'middleName',
        'ownership' => 'ownership',
        'phone' => 'phone',
        'type' => 'type',
        'verification_status' => 'verificationStatus'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'applicant' => 'setApplicant',
        'date_of_birth' => 'setDateOfBirth',
        'document_info' => 'setDocumentInfo',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'home_address' => 'setHomeAddress',
        'id' => 'setId',
        'last_name' => 'setLastName',
        'middle_name' => 'setMiddleName',
        'ownership' => 'setOwnership',
        'phone' => 'setPhone',
        'type' => 'setType',
        'verification_status' => 'setVerificationStatus'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'applicant' => 'getApplicant',
        'date_of_birth' => 'getDateOfBirth',
        'document_info' => 'getDocumentInfo',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'home_address' => 'getHomeAddress',
        'id' => 'getId',
        'last_name' => 'getLastName',
        'middle_name' => 'getMiddleName',
        'ownership' => 'getOwnership',
        'phone' => 'getPhone',
        'type' => 'getType',
        'verification_status' => 'getVerificationStatus'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_DIRECTOR = 'DIRECTOR';
    const TYPE_PARTNER = 'PARTNER';
    const TYPE_CSECRETARY = 'CSECRETARY';
    const TYPE_SOLETRADER = 'SOLETRADER';
    const TYPE_BENE_OWNER = 'BENE_OWNER';
    const TYPE_C_INTEREST = 'C_INTEREST';
    const TYPE_INDIVIDUAL = 'INDIVIDUAL';
    const VERIFICATION_STATUS_UNVERIFIED = 'UNVERIFIED';
    const VERIFICATION_STATUS_VERIFIED = 'VERIFIED';
    const VERIFICATION_STATUS_EXVERIFIED = 'EXVERIFIED';
    const VERIFICATION_STATUS_REFERRED = 'REFERRED';
    const VERIFICATION_STATUS_DECLINED = 'DECLINED';
    const VERIFICATION_STATUS_REVIEWED = 'REVIEWED';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DIRECTOR,
            self::TYPE_PARTNER,
            self::TYPE_CSECRETARY,
            self::TYPE_SOLETRADER,
            self::TYPE_BENE_OWNER,
            self::TYPE_C_INTEREST,
            self::TYPE_INDIVIDUAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getVerificationStatusAllowableValues()
    {
        return [
            self::VERIFICATION_STATUS_UNVERIFIED,
            self::VERIFICATION_STATUS_VERIFIED,
            self::VERIFICATION_STATUS_EXVERIFIED,
            self::VERIFICATION_STATUS_REFERRED,
            self::VERIFICATION_STATUS_DECLINED,
            self::VERIFICATION_STATUS_REVIEWED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['applicant'] = isset($data['applicant']) ? $data['applicant'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['document_info'] = isset($data['document_info']) ? $data['document_info'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['home_address'] = isset($data['home_address']) ? $data['home_address'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['ownership'] = isset($data['ownership']) ? $data['ownership'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['verification_status'] = isset($data['verification_status']) ? $data['verification_status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['date_of_birth'] === null) {
            $invalid_properties[] = "'date_of_birth' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalid_properties[] = "'first_name' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalid_properties[] = "'last_name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["DIRECTOR", "PARTNER", "CSECRETARY", "SOLETRADER", "BENE_OWNER", "C_INTEREST", "INDIVIDUAL"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of 'DIRECTOR', 'PARTNER', 'CSECRETARY', 'SOLETRADER', 'BENE_OWNER', 'C_INTEREST', 'INDIVIDUAL'.";
        }

        if ($this->container['verification_status'] === null) {
            $invalid_properties[] = "'verification_status' can't be null";
        }
        $allowed_values = ["UNVERIFIED", "VERIFIED", "EXVERIFIED", "REFERRED", "DECLINED", "REVIEWED"];
        if (!in_array($this->container['verification_status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'verification_status', must be one of 'UNVERIFIED', 'VERIFIED', 'EXVERIFIED', 'REFERRED', 'DECLINED', 'REVIEWED'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['date_of_birth'] === null) {
            return false;
        }
        if ($this->container['first_name'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['last_name'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["DIRECTOR", "PARTNER", "CSECRETARY", "SOLETRADER", "BENE_OWNER", "C_INTEREST", "INDIVIDUAL"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if ($this->container['verification_status'] === null) {
            return false;
        }
        $allowed_values = ["UNVERIFIED", "VERIFIED", "EXVERIFIED", "REFERRED", "DECLINED", "REVIEWED"];
        if (!in_array($this->container['verification_status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets applicant
     * @return bool
     */
    public function getApplicant()
    {
        return $this->container['applicant'];
    }

    /**
     * Sets applicant
     * @param bool $applicant Indicates which Associate originally applied for the Modulr account
     * @return $this
     */
    public function setApplicant($applicant)
    {
        $this->container['applicant'] = $applicant;

        return $this;
    }

    /**
     * Gets date_of_birth
     * @return string
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     * @param string $date_of_birth Associate's date of birth in format yyyy-MM-dd
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets document_info
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\Document[]
     */
    public function getDocumentInfo()
    {
        return $this->container['document_info'];
    }

    /**
     * Sets document_info
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\Document[] $document_info Documents gathered during Customer Due Dilligence checks on an Associate.
     * @return $this
     */
    public function setDocumentInfo($document_info)
    {
        $this->container['document_info'] = $document_info;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Associate's email address
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name Associate's first name(s)
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets home_address
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\Address
     */
    public function getHomeAddress()
    {
        return $this->container['home_address'];
    }

    /**
     * Sets home_address
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\Address $home_address Home address of the Associate
     * @return $this
     */
    public function setHomeAddress($home_address)
    {
        $this->container['home_address'] = $home_address;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Unique id for the Associate
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name Associate's surname
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_name
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     * @param string $middle_name Associate's middle name
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets ownership
     * @return int
     */
    public function getOwnership()
    {
        return $this->container['ownership'];
    }

    /**
     * Sets ownership
     * @param int $ownership The Associates's percentage ownership of the Customer
     * @return $this
     */
    public function setOwnership($ownership)
    {
        $this->container['ownership'] = $ownership;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone Associate's phone number
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Describes the relation between the Associate and the Customer. Can be one of
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('DIRECTOR', 'PARTNER', 'CSECRETARY', 'SOLETRADER', 'BENE_OWNER', 'C_INTEREST', 'INDIVIDUAL');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'DIRECTOR', 'PARTNER', 'CSECRETARY', 'SOLETRADER', 'BENE_OWNER', 'C_INTEREST', 'INDIVIDUAL'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets verification_status
     * @return string
     */
    public function getVerificationStatus()
    {
        return $this->container['verification_status'];
    }

    /**
     * Sets verification_status
     * @param string $verification_status How the Associate was verified. Can be one of
     * @return $this
     */
    public function setVerificationStatus($verification_status)
    {
        $allowed_values = array('UNVERIFIED', 'VERIFIED', 'EXVERIFIED', 'REFERRED', 'DECLINED', 'REVIEWED');
        if ((!in_array($verification_status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'verification_status', must be one of 'UNVERIFIED', 'VERIFIED', 'EXVERIFIED', 'REFERRED', 'DECLINED', 'REVIEWED'");
        }
        $this->container['verification_status'] = $verification_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


