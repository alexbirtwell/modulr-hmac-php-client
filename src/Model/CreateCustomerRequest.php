<?php
/**
 * CreateCustomerRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrowdProperty\ModulrHmacPhpClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Modulr API
 *
 * Modulo API
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrowdProperty\ModulrHmacPhpClient\Model;

use \ArrayAccess;

/**
 * CreateCustomerRequest Class Doc Comment
 *
 * @category    Class
 * @package     CrowdProperty\ModulrHmacPhpClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateCustomerRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CreateCustomerRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'associates' => '\CrowdProperty\ModulrHmacPhpClient\Model\CreateAssociateRequest[]',
        'document_info' => '\CrowdProperty\ModulrHmacPhpClient\Model\Document[]',
        'expected_monthly_spend' => 'int',
        'external_reference' => 'string',
        'industry_code' => 'string',
        'registered_address' => '\CrowdProperty\ModulrHmacPhpClient\Model\AddressRequest',
        'tcs_version' => 'int',
        'trading_address' => '\CrowdProperty\ModulrHmacPhpClient\Model\AddressRequest',
        'type' => 'string',
        'name' => 'string',
        'company_reg_number' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'associates' => 'associates',
        'document_info' => 'documentInfo',
        'expected_monthly_spend' => 'expectedMonthlySpend',
        'external_reference' => 'externalReference',
        'industry_code' => 'industryCode',
        'registered_address' => 'registeredAddress',
        'tcs_version' => 'tcsVersion',
        'trading_address' => 'tradingAddress',
        'type' => 'type',
        'name' => 'name',
        'company_reg_number' => 'companyRegNumber'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'associates' => 'setAssociates',
        'document_info' => 'setDocumentInfo',
        'expected_monthly_spend' => 'setExpectedMonthlySpend',
        'external_reference' => 'setExternalReference',
        'industry_code' => 'setIndustryCode',
        'registered_address' => 'setRegisteredAddress',
        'tcs_version' => 'setTcsVersion',
        'trading_address' => 'setTradingAddress',
        'type' => 'setType',
        'name' => 'setName',
        'company_reg_number' => 'setCompanyRegNumber'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'associates' => 'getAssociates',
        'document_info' => 'getDocumentInfo',
        'expected_monthly_spend' => 'getExpectedMonthlySpend',
        'external_reference' => 'getExternalReference',
        'industry_code' => 'getIndustryCode',
        'registered_address' => 'getRegisteredAddress',
        'tcs_version' => 'getTcsVersion',
        'trading_address' => 'getTradingAddress',
        'type' => 'getType',
        'name' => 'getName',
        'company_reg_number' => 'getCompanyRegNumber'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_LLC = 'LLC';
    const TYPE_PLC = 'PLC';
    const TYPE_SOLETRADER = 'SOLETRADER';
    const TYPE_OPARTNRSHP = 'OPARTNRSHP';
    const TYPE_LPARTNRSHP = 'LPARTNRSHP';
    const TYPE_LLP = 'LLP';
    const TYPE_CHARITY = 'CHARITY';
    const TYPE_INDIVIDUAL = 'INDIVIDUAL';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_LLC,
            self::TYPE_PLC,
            self::TYPE_SOLETRADER,
            self::TYPE_OPARTNRSHP,
            self::TYPE_LPARTNRSHP,
            self::TYPE_LLP,
            self::TYPE_CHARITY,
            self::TYPE_INDIVIDUAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['associates'] = isset($data['associates']) ? $data['associates'] : null;
        $this->container['document_info'] = isset($data['document_info']) ? $data['document_info'] : null;
        $this->container['expected_monthly_spend'] = isset($data['expected_monthly_spend']) ? $data['expected_monthly_spend'] : null;
        $this->container['external_reference'] = isset($data['external_reference']) ? $data['external_reference'] : null;
        $this->container['industry_code'] = isset($data['industry_code']) ? $data['industry_code'] : null;
        $this->container['registered_address'] = isset($data['registered_address']) ? $data['registered_address'] : null;
        $this->container['tcs_version'] = isset($data['tcs_version']) ? $data['tcs_version'] : null;
        $this->container['trading_address'] = isset($data['trading_address']) ? $data['trading_address'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['company_reg_number'] = isset($data['company_reg_number']) ? $data['company_reg_number'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['expected_monthly_spend'] === null) {
            $invalid_properties[] = "'expected_monthly_spend' can't be null";
        }
        if (($this->container['expected_monthly_spend'] > 2147483647)) {
            $invalid_properties[] = "invalid value for 'expected_monthly_spend', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['external_reference']) && (strlen($this->container['external_reference']) > 50)) {
            $invalid_properties[] = "invalid value for 'external_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['external_reference']) && !preg_match("/[\\w-\\s]*_/", $this->container['external_reference'])) {
            $invalid_properties[] = "invalid value for 'external_reference', must be conform to the pattern /[\\w-\\s]*_/.";
        }

        if (!is_null($this->container['industry_code']) && (strlen($this->container['industry_code']) > 5)) {
            $invalid_properties[] = "invalid value for 'industry_code', the character length must be smaller than or equal to 5.";
        }

        if ($this->container['tcs_version'] === null) {
            $invalid_properties[] = "'tcs_version' can't be null";
        }
        if (($this->container['tcs_version'] > 1000)) {
            $invalid_properties[] = "invalid value for 'tcs_version', must be smaller than or equal to 1000.";
        }

        if (($this->container['tcs_version'] < 1)) {
            $invalid_properties[] = "invalid value for 'tcs_version', must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["LLC", "PLC", "SOLETRADER", "OPARTNRSHP", "LPARTNRSHP", "LLP", "CHARITY", "INDIVIDUAL"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of 'LLC', 'PLC', 'SOLETRADER', 'OPARTNRSHP', 'LPARTNRSHP', 'LLP', 'CHARITY', 'INDIVIDUAL'.";
        }

        if (!is_null($this->container['name']) && (strlen($this->container['name']) > 100)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['name']) && !preg_match("/^([_'@,&()£$€¥=#%‘’:;/<>«»\"!‘“”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*?[A-Za-z0-9])+[_'@,&()£$€¥=#%‘’:;/<>«»\"!‘“”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*_/", $this->container['name'])) {
            $invalid_properties[] = "invalid value for 'name', must be conform to the pattern /^([_'@,&()£$€¥=#%‘’:;/<>«»\"!‘“”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*?[A-Za-z0-9])+[_'@,&()£$€¥=#%‘’:;/<>«»\"!‘“”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*_/.";
        }

        if (!is_null($this->container['company_reg_number']) && (strlen($this->container['company_reg_number']) > 8)) {
            $invalid_properties[] = "invalid value for 'company_reg_number', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['company_reg_number']) && !preg_match("/^([A-Za-z]{2}|[0-9]{2})[0-9]{6}$/", $this->container['company_reg_number'])) {
            $invalid_properties[] = "invalid value for 'company_reg_number', must be conform to the pattern /^([A-Za-z]{2}|[0-9]{2})[0-9]{6}$/.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['expected_monthly_spend'] === null) {
            return false;
        }
        if ($this->container['expected_monthly_spend'] > 2147483647) {
            return false;
        }
        if (strlen($this->container['external_reference']) > 50) {
            return false;
        }
        if (!preg_match("/[\\w-\\s]*_/", $this->container['external_reference'])) {
            return false;
        }
        if (strlen($this->container['industry_code']) > 5) {
            return false;
        }
        if ($this->container['tcs_version'] === null) {
            return false;
        }
        if ($this->container['tcs_version'] > 1000) {
            return false;
        }
        if ($this->container['tcs_version'] < 1) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["LLC", "PLC", "SOLETRADER", "OPARTNRSHP", "LPARTNRSHP", "LLP", "CHARITY", "INDIVIDUAL"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['name']) > 100) {
            return false;
        }
        if (!preg_match("/^([_'@,&()£$€¥=#%‘’:;/<>«»\"!‘“”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*?[A-Za-z0-9])+[_'@,&()£$€¥=#%‘’:;/<>«»\"!‘“”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*_/", $this->container['name'])) {
            return false;
        }
        if (strlen($this->container['company_reg_number']) > 8) {
            return false;
        }
        if (!preg_match("/^([A-Za-z]{2}|[0-9]{2})[0-9]{6}$/", $this->container['company_reg_number'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets associates
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\CreateAssociateRequest[]
     */
    public function getAssociates()
    {
        return $this->container['associates'];
    }

    /**
     * Sets associates
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\CreateAssociateRequest[] $associates List of associates
     * @return $this
     */
    public function setAssociates($associates)
    {
        $this->container['associates'] = $associates;

        return $this;
    }

    /**
     * Gets document_info
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\Document[]
     */
    public function getDocumentInfo()
    {
        return $this->container['document_info'];
    }

    /**
     * Sets document_info
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\Document[] $document_info information on uploaded documents
     * @return $this
     */
    public function setDocumentInfo($document_info)
    {
        $this->container['document_info'] = $document_info;

        return $this;
    }

    /**
     * Gets expected_monthly_spend
     * @return int
     */
    public function getExpectedMonthlySpend()
    {
        return $this->container['expected_monthly_spend'];
    }

    /**
     * Sets expected_monthly_spend
     * @param int $expected_monthly_spend
     * @return $this
     */
    public function setExpectedMonthlySpend($expected_monthly_spend)
    {

        if (($expected_monthly_spend > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $expected_monthly_spend when calling CreateCustomerRequest., must be smaller than or equal to 2147483647.');
        }

        $this->container['expected_monthly_spend'] = $expected_monthly_spend;

        return $this;
    }

    /**
     * Gets external_reference
     * @return string
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     * @param string $external_reference
     * @return $this
     */
    public function setExternalReference($external_reference)
    {
        if (!is_null($external_reference) && (strlen($external_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $external_reference when calling CreateCustomerRequest., must be smaller than or equal to 50.');
        }
        if (!is_null($external_reference) && (!preg_match("/[\\w-\\s]*_/", $external_reference))) {
            throw new \InvalidArgumentException("invalid value for $external_reference when calling CreateCustomerRequest., must conform to the pattern /[\\w-\\s]*_/.");
        }

        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets industry_code
     * @return string
     */
    public function getIndustryCode()
    {
        return $this->container['industry_code'];
    }

    /**
     * Sets industry_code
     * @param string $industry_code Mandatory for all types except for 'INDIVIDUAL'
     * @return $this
     */
    public function setIndustryCode($industry_code)
    {
        if (!is_null($industry_code) && (strlen($industry_code) > 5)) {
            throw new \InvalidArgumentException('invalid length for $industry_code when calling CreateCustomerRequest., must be smaller than or equal to 5.');
        }

        $this->container['industry_code'] = $industry_code;

        return $this;
    }

    /**
     * Gets registered_address
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\AddressRequest
     */
    public function getRegisteredAddress()
    {
        return $this->container['registered_address'];
    }

    /**
     * Sets registered_address
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\AddressRequest $registered_address Registered address
     * @return $this
     */
    public function setRegisteredAddress($registered_address)
    {
        $this->container['registered_address'] = $registered_address;

        return $this;
    }

    /**
     * Gets tcs_version
     * @return int
     */
    public function getTcsVersion()
    {
        return $this->container['tcs_version'];
    }

    /**
     * Sets tcs_version
     * @param int $tcs_version
     * @return $this
     */
    public function setTcsVersion($tcs_version)
    {

        if (($tcs_version > 1000)) {
            throw new \InvalidArgumentException('invalid value for $tcs_version when calling CreateCustomerRequest., must be smaller than or equal to 1000.');
        }
        if (($tcs_version < 1)) {
            throw new \InvalidArgumentException('invalid value for $tcs_version when calling CreateCustomerRequest., must be bigger than or equal to 1.');
        }

        $this->container['tcs_version'] = $tcs_version;

        return $this;
    }

    /**
     * Gets trading_address
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\AddressRequest
     */
    public function getTradingAddress()
    {
        return $this->container['trading_address'];
    }

    /**
     * Sets trading_address
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\AddressRequest $trading_address Trading address. Mandatory for all types except for 'INDIVIDUAL'
     * @return $this
     */
    public function setTradingAddress($trading_address)
    {
        $this->container['trading_address'] = $trading_address;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('LLC', 'PLC', 'SOLETRADER', 'OPARTNRSHP', 'LPARTNRSHP', 'LLP', 'CHARITY', 'INDIVIDUAL');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'LLC', 'PLC', 'SOLETRADER', 'OPARTNRSHP', 'LPARTNRSHP', 'LLP', 'CHARITY', 'INDIVIDUAL'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name AlphaNumeric characters plus [ _ ' @ , & £ $ € ¥ = # % ‘ ’ : ; \\ / < > « »  ! ‘ “ ” . ? - *{ }  + % ( )]. Mandatory for all types except 'INDIVIDUAL'
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateCustomerRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($name) && (!preg_match("/^([_'@,&()£$€¥=#%‘’:;/<>«»\"!‘“”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*?[A-Za-z0-9])+[_'@,&()£$€¥=#%‘’:;/<>«»\"!‘“”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*_/", $name))) {
            throw new \InvalidArgumentException("invalid value for $name when calling CreateCustomerRequest., must conform to the pattern /^([_'@,&()£$€¥=#%‘’:;/<>«»\"!‘“”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*?[A-Za-z0-9])+[_'@,&()£$€¥=#%‘’:;/<>«»\"!‘“”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*_/.");
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets company_reg_number
     * @return string
     */
    public function getCompanyRegNumber()
    {
        return $this->container['company_reg_number'];
    }

    /**
     * Sets company_reg_number
     * @param string $company_reg_number 8 digits or 2 alphabets followed by 6 digits, must be specified if the type is limited company
     * @return $this
     */
    public function setCompanyRegNumber($company_reg_number)
    {
        if (!is_null($company_reg_number) && (strlen($company_reg_number) > 8)) {
            throw new \InvalidArgumentException('invalid length for $company_reg_number when calling CreateCustomerRequest., must be smaller than or equal to 8.');
        }
        if (!is_null($company_reg_number) && (!preg_match("/^([A-Za-z]{2}|[0-9]{2})[0-9]{6}$/", $company_reg_number))) {
            throw new \InvalidArgumentException("invalid value for $company_reg_number when calling CreateCustomerRequest., must conform to the pattern /^([A-Za-z]{2}|[0-9]{2})[0-9]{6}$/.");
        }

        $this->container['company_reg_number'] = $company_reg_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


