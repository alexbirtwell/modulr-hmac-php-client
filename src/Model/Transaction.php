<?php
/**
 * Transaction.
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swaagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Modulr API.
 *
 * Modulo API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrowdProperty\ModulrHmacPhpClient\Model;

use ArrayAccess;

/**
 * Transaction Class Doc Comment.
 *
 * @category    Class
 *
 * @author      Swagger Codegen team
 *
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Transaction';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'additional_info'           => 'object',
        'amount'                    => 'double',
        'credit'                    => 'bool',
        'currency'                  => 'string',
        'description'               => 'string',
        'id'                        => 'string',
        'posted_date'               => '\DateTime',
        'source_external_reference' => 'string',
        'source_id'                 => 'string',
        'transaction_date'          => '\DateTime',
        'type'                      => 'string',
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_info'           => 'additionalInfo',
        'amount'                    => 'amount',
        'credit'                    => 'credit',
        'currency'                  => 'currency',
        'description'               => 'description',
        'id'                        => 'id',
        'posted_date'               => 'postedDate',
        'source_external_reference' => 'sourceExternalReference',
        'source_id'                 => 'sourceId',
        'transaction_date'          => 'transactionDate',
        'type'                      => 'type',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_info'           => 'setAdditionalInfo',
        'amount'                    => 'setAmount',
        'credit'                    => 'setCredit',
        'currency'                  => 'setCurrency',
        'description'               => 'setDescription',
        'id'                        => 'setId',
        'posted_date'               => 'setPostedDate',
        'source_external_reference' => 'setSourceExternalReference',
        'source_id'                 => 'setSourceId',
        'transaction_date'          => 'setTransactionDate',
        'type'                      => 'setType',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_info'           => 'getAdditionalInfo',
        'amount'                    => 'getAmount',
        'credit'                    => 'getCredit',
        'currency'                  => 'getCurrency',
        'description'               => 'getDescription',
        'id'                        => 'getId',
        'posted_date'               => 'getPostedDate',
        'source_external_reference' => 'getSourceExternalReference',
        'source_id'                 => 'getSourceId',
        'transaction_date'          => 'getTransactionDate',
        'type'                      => 'getType',
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_PI_BACS = 'PI_BACS';
    const TYPE_PI_FAST = 'PI_FAST';
    const TYPE_PI_DD = 'PI_DD';
    const TYPE_PO_FAST = 'PO_FAST';
    const TYPE_PO_REV = 'PO_REV';
    const TYPE_INT_INTERC = 'INT_INTERC';

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PI_BACS,
            self::TYPE_PI_FAST,
            self::TYPE_PI_DD,
            self::TYPE_PO_FAST,
            self::TYPE_PO_REV,
            self::TYPE_INT_INTERC,
        ];
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_info'] = isset($data['additional_info']) ? $data['additional_info'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['credit'] = isset($data['credit']) ? $data['credit'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['posted_date'] = isset($data['posted_date']) ? $data['posted_date'] : null;
        $this->container['source_external_reference'] = isset($data['source_external_reference']) ? $data['source_external_reference'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['amount'] === null) {
            $invalid_properties[] = "'amount' can't be null";
        }
        if ($this->container['credit'] === null) {
            $invalid_properties[] = "'credit' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalid_properties[] = "'currency' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['posted_date'] === null) {
            $invalid_properties[] = "'posted_date' can't be null";
        }
        if ($this->container['source_id'] === null) {
            $invalid_properties[] = "'source_id' can't be null";
        }
        if ($this->container['transaction_date'] === null) {
            $invalid_properties[] = "'transaction_date' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ['PI_BACS', 'PI_FAST', 'PI_DD', 'PO_FAST', 'PO_REV', 'INT_INTERC'];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of 'PI_BACS', 'PI_FAST', 'PI_DD', 'PO_FAST', 'PO_REV', 'INT_INTERC'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if ($this->container['amount'] === null) {
            return false;
        }
        if ($this->container['credit'] === null) {
            return false;
        }
        if ($this->container['currency'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['posted_date'] === null) {
            return false;
        }
        if ($this->container['source_id'] === null) {
            return false;
        }
        if ($this->container['transaction_date'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ['PI_BACS', 'PI_FAST', 'PI_DD', 'PO_FAST', 'PO_REV', 'INT_INTERC'];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }

        return true;
    }

    /**
     * Gets additional_info.
     *
     * @return object
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info.
     *
     * @param object $additional_info any extra information available on transaction.
     *
     * @return $this
     */
    public function setAdditionalInfo($additional_info)
    {
        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param float $amount Amount of the transaction in Major Currency Units
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets credit.
     *
     * @return bool
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit.
     *
     * @param bool $credit Indicates if the transaction was a Credit or a Debit
     *
     * @return $this
     */
    public function setCredit($credit)
    {
        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets currency.
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency.
     *
     * @param string $currency Currency of the account in ISO 4217 format
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description.
     *
     * @param string $description Description of the transaction. Contains Payer/ Payee details and reference
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id Unique id for the Transaction
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets posted_date.
     *
     * @return \DateTime
     */
    public function getPostedDate()
    {
        return $this->container['posted_date'];
    }

    /**
     * Sets posted_date.
     *
     * @param \DateTime $posted_date Datetime when the transaction was posted to the Modulr system.
     *
     * @return $this
     */
    public function setPostedDate($posted_date)
    {
        $this->container['posted_date'] = $posted_date;

        return $this;
    }

    /**
     * Gets source_external_reference.
     *
     * @return string
     */
    public function getSourceExternalReference()
    {
        return $this->container['source_external_reference'];
    }

    /**
     * Sets source_external_reference.
     *
     * @param string $source_external_reference
     *
     * @return $this
     */
    public function setSourceExternalReference($source_external_reference)
    {
        $this->container['source_external_reference'] = $source_external_reference;

        return $this;
    }

    /**
     * Gets source_id.
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id.
     *
     * @param string $source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets transaction_date.
     *
     * @return \DateTime
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date.
     *
     * @param \DateTime $transaction_date Datetime when the transaction took place
     *
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type.
     *
     * @param string $type Enumerated type indicating the type of the transaction. Values:
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = ['PI_BACS', 'PI_FAST', 'PI_DD', 'PO_FAST', 'PO_REV', 'INT_INTERC'];
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'PI_BACS', 'PI_FAST', 'PI_DD', 'PO_FAST', 'PO_REV', 'INT_INTERC'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}
