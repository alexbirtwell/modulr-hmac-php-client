<?php
/**
 * Customer.
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swaagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Modulr API.
 *
 * Modulo API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrowdProperty\ModulrHmacPhpClient\Model;

use ArrayAccess;

/**
 * Customer Class Doc Comment.
 *
 * @category    Class
 *
 * @author      Swagger Codegen team
 *
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Customer implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Customer';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'associates'             => '\CrowdProperty\ModulrHmacPhpClient\Model\Associate[]',
        'company_reg_number'     => 'string',
        'created_date'           => '\DateTime',
        'document_info'          => '\CrowdProperty\ModulrHmacPhpClient\Model\Document[]',
        'expected_monthly_spend' => 'int',
        'external_reference'     => 'string',
        'id'                     => 'string',
        'industry_code'          => 'string',
        'name'                   => 'string',
        'registered_address'     => '\CrowdProperty\ModulrHmacPhpClient\Model\Address',
        'status'                 => 'string',
        'tcs_version'            => 'int',
        'trading_address'        => '\CrowdProperty\ModulrHmacPhpClient\Model\Address',
        'type'                   => 'string',
        'verification_status'    => 'string',
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'associates'             => 'associates',
        'company_reg_number'     => 'companyRegNumber',
        'created_date'           => 'createdDate',
        'document_info'          => 'documentInfo',
        'expected_monthly_spend' => 'expectedMonthlySpend',
        'external_reference'     => 'externalReference',
        'id'                     => 'id',
        'industry_code'          => 'industryCode',
        'name'                   => 'name',
        'registered_address'     => 'registeredAddress',
        'status'                 => 'status',
        'tcs_version'            => 'tcsVersion',
        'trading_address'        => 'tradingAddress',
        'type'                   => 'type',
        'verification_status'    => 'verificationStatus',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'associates'             => 'setAssociates',
        'company_reg_number'     => 'setCompanyRegNumber',
        'created_date'           => 'setCreatedDate',
        'document_info'          => 'setDocumentInfo',
        'expected_monthly_spend' => 'setExpectedMonthlySpend',
        'external_reference'     => 'setExternalReference',
        'id'                     => 'setId',
        'industry_code'          => 'setIndustryCode',
        'name'                   => 'setName',
        'registered_address'     => 'setRegisteredAddress',
        'status'                 => 'setStatus',
        'tcs_version'            => 'setTcsVersion',
        'trading_address'        => 'setTradingAddress',
        'type'                   => 'setType',
        'verification_status'    => 'setVerificationStatus',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'associates'             => 'getAssociates',
        'company_reg_number'     => 'getCompanyRegNumber',
        'created_date'           => 'getCreatedDate',
        'document_info'          => 'getDocumentInfo',
        'expected_monthly_spend' => 'getExpectedMonthlySpend',
        'external_reference'     => 'getExternalReference',
        'id'                     => 'getId',
        'industry_code'          => 'getIndustryCode',
        'name'                   => 'getName',
        'registered_address'     => 'getRegisteredAddress',
        'status'                 => 'getStatus',
        'tcs_version'            => 'getTcsVersion',
        'trading_address'        => 'getTradingAddress',
        'type'                   => 'getType',
        'verification_status'    => 'getVerificationStatus',
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_ACTIVE = 'ACTIVE';
    const STATUS_CLOSED = 'CLOSED';
    const TYPE_LLC = 'LLC';
    const TYPE_PLC = 'PLC';
    const TYPE_SOLETRADER = 'SOLETRADER';
    const TYPE_OPARTNRSHP = 'OPARTNRSHP';
    const TYPE_LPARTNRSHP = 'LPARTNRSHP';
    const TYPE_LLP = 'LLP';
    const TYPE_CHARITY = 'CHARITY';
    const TYPE_INDIVIDUAL = 'INDIVIDUAL';
    const VERIFICATION_STATUS_UNVERIFIED = 'UNVERIFIED';
    const VERIFICATION_STATUS_VERIFIED = 'VERIFIED';
    const VERIFICATION_STATUS_EXVERIFIED = 'EXVERIFIED';
    const VERIFICATION_STATUS_REFERRED = 'REFERRED';
    const VERIFICATION_STATUS_DECLINED = 'DECLINED';
    const VERIFICATION_STATUS_REVIEWED = 'REVIEWED';

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_CLOSED,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_LLC,
            self::TYPE_PLC,
            self::TYPE_SOLETRADER,
            self::TYPE_OPARTNRSHP,
            self::TYPE_LPARTNRSHP,
            self::TYPE_LLP,
            self::TYPE_CHARITY,
            self::TYPE_INDIVIDUAL,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getVerificationStatusAllowableValues()
    {
        return [
            self::VERIFICATION_STATUS_UNVERIFIED,
            self::VERIFICATION_STATUS_VERIFIED,
            self::VERIFICATION_STATUS_EXVERIFIED,
            self::VERIFICATION_STATUS_REFERRED,
            self::VERIFICATION_STATUS_DECLINED,
            self::VERIFICATION_STATUS_REVIEWED,
        ];
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['associates'] = isset($data['associates']) ? $data['associates'] : null;
        $this->container['company_reg_number'] = isset($data['company_reg_number']) ? $data['company_reg_number'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['document_info'] = isset($data['document_info']) ? $data['document_info'] : null;
        $this->container['expected_monthly_spend'] = isset($data['expected_monthly_spend']) ? $data['expected_monthly_spend'] : null;
        $this->container['external_reference'] = isset($data['external_reference']) ? $data['external_reference'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['industry_code'] = isset($data['industry_code']) ? $data['industry_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['registered_address'] = isset($data['registered_address']) ? $data['registered_address'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tcs_version'] = isset($data['tcs_version']) ? $data['tcs_version'] : null;
        $this->container['trading_address'] = isset($data['trading_address']) ? $data['trading_address'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['verification_status'] = isset($data['verification_status']) ? $data['verification_status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['created_date'] === null) {
            $invalid_properties[] = "'created_date' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        $allowed_values = ['ACTIVE', 'CLOSED'];
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of 'ACTIVE', 'CLOSED'.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ['LLC', 'PLC', 'SOLETRADER', 'OPARTNRSHP', 'LPARTNRSHP', 'LLP', 'CHARITY', 'INDIVIDUAL'];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of 'LLC', 'PLC', 'SOLETRADER', 'OPARTNRSHP', 'LPARTNRSHP', 'LLP', 'CHARITY', 'INDIVIDUAL'.";
        }

        if ($this->container['verification_status'] === null) {
            $invalid_properties[] = "'verification_status' can't be null";
        }
        $allowed_values = ['UNVERIFIED', 'VERIFIED', 'EXVERIFIED', 'REFERRED', 'DECLINED', 'REVIEWED'];
        if (!in_array($this->container['verification_status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'verification_status', must be one of 'UNVERIFIED', 'VERIFIED', 'EXVERIFIED', 'REFERRED', 'DECLINED', 'REVIEWED'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if ($this->container['created_date'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowed_values = ['ACTIVE', 'CLOSED'];
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ['LLC', 'PLC', 'SOLETRADER', 'OPARTNRSHP', 'LPARTNRSHP', 'LLP', 'CHARITY', 'INDIVIDUAL'];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if ($this->container['verification_status'] === null) {
            return false;
        }
        $allowed_values = ['UNVERIFIED', 'VERIFIED', 'EXVERIFIED', 'REFERRED', 'DECLINED', 'REVIEWED'];
        if (!in_array($this->container['verification_status'], $allowed_values)) {
            return false;
        }

        return true;
    }

    /**
     * Gets associates.
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\Associate[]
     */
    public function getAssociates()
    {
        return $this->container['associates'];
    }

    /**
     * Sets associates.
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\Associate[] $associates Array of associate objects that link to the Customer. For example, this could contain the details of the company directors for a Limited company, or or the partners for a partnership.
     *
     * @return $this
     */
    public function setAssociates($associates)
    {
        $this->container['associates'] = $associates;

        return $this;
    }

    /**
     * Gets company_reg_number.
     *
     * @return string
     */
    public function getCompanyRegNumber()
    {
        return $this->container['company_reg_number'];
    }

    /**
     * Sets company_reg_number.
     *
     * @param string $company_reg_number The company registration / incorporation number of the company. Only applicable for companies registered with Companies House
     *
     * @return $this
     */
    public function setCompanyRegNumber($company_reg_number)
    {
        $this->container['company_reg_number'] = $company_reg_number;

        return $this;
    }

    /**
     * Gets created_date.
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date.
     *
     * @param \DateTime $created_date Datetime when the customer was created
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets document_info.
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\Document[]
     */
    public function getDocumentInfo()
    {
        return $this->container['document_info'];
    }

    /**
     * Sets document_info.
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\Document[] $document_info Array of document objects that relate to the Customer being created. Examples of Documents could be proof of a Company Director's identity or address, Articles of Association or a Partnership Agreement.
     *
     * @return $this
     */
    public function setDocumentInfo($document_info)
    {
        $this->container['document_info'] = $document_info;

        return $this;
    }

    /**
     * Gets expected_monthly_spend.
     *
     * @return int
     */
    public function getExpectedMonthlySpend()
    {
        return $this->container['expected_monthly_spend'];
    }

    /**
     * Sets expected_monthly_spend.
     *
     * @param int $expected_monthly_spend Indication of the monthly spend of the customer.
     *
     * @return $this
     */
    public function setExpectedMonthlySpend($expected_monthly_spend)
    {
        $this->container['expected_monthly_spend'] = $expected_monthly_spend;

        return $this;
    }

    /**
     * Gets external_reference.
     *
     * @return string
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference.
     *
     * @param string $external_reference
     *
     * @return $this
     */
    public function setExternalReference($external_reference)
    {
        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id Unique identifier for a Customer. Begins with 'C'
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets industry_code.
     *
     * @return string
     */
    public function getIndustryCode()
    {
        return $this->container['industry_code'];
    }

    /**
     * Sets industry_code.
     *
     * @param string $industry_code
     *
     * @return $this
     */
    public function setIndustryCode($industry_code)
    {
        $this->container['industry_code'] = $industry_code;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name.
     *
     * @param string $name Customer's company name - must be unique across the Modulr platform.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets registered_address.
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\Address
     */
    public function getRegisteredAddress()
    {
        return $this->container['registered_address'];
    }

    /**
     * Sets registered_address.
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\Address $registered_address The address of the company's registered office.
     *
     * @return $this
     */
    public function setRegisteredAddress($registered_address)
    {
        $this->container['registered_address'] = $registered_address;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param string $status Status of the Customer. Customers must be 'Active' for Accounts to be created for them. Can be:
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = ['ACTIVE', 'CLOSED'];
        if ((!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'ACTIVE', 'CLOSED'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tcs_version.
     *
     * @return int
     */
    public function getTcsVersion()
    {
        return $this->container['tcs_version'];
    }

    /**
     * Sets tcs_version.
     *
     * @param int $tcs_version Version of the Modulr Account Terms and Conditions the Customer has agreed to.
     *
     * @return $this
     */
    public function setTcsVersion($tcs_version)
    {
        $this->container['tcs_version'] = $tcs_version;

        return $this;
    }

    /**
     * Gets trading_address.
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\Address
     */
    public function getTradingAddress()
    {
        return $this->container['trading_address'];
    }

    /**
     * Sets trading_address.
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\Address $trading_address The address of the company's day-to-day trading activities.
     *
     * @return $this
     */
    public function setTradingAddress($trading_address)
    {
        $this->container['trading_address'] = $trading_address;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type.
     *
     * @param string $type The type of Customer - accepted values are:
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = ['LLC', 'PLC', 'SOLETRADER', 'OPARTNRSHP', 'LPARTNRSHP', 'LLP', 'CHARITY', 'INDIVIDUAL'];
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'LLC', 'PLC', 'SOLETRADER', 'OPARTNRSHP', 'LPARTNRSHP', 'LLP', 'CHARITY', 'INDIVIDUAL'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets verification_status.
     *
     * @return string
     */
    public function getVerificationStatus()
    {
        return $this->container['verification_status'];
    }

    /**
     * Sets verification_status.
     *
     * @param string $verification_status How the identity of the Customer has been verified. Can be:
     *
     * @return $this
     */
    public function setVerificationStatus($verification_status)
    {
        $allowed_values = ['UNVERIFIED', 'VERIFIED', 'EXVERIFIED', 'REFERRED', 'DECLINED', 'REVIEWED'];
        if ((!in_array($verification_status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'verification_status', must be one of 'UNVERIFIED', 'VERIFIED', 'EXVERIFIED', 'REFERRED', 'DECLINED', 'REVIEWED'");
        }
        $this->container['verification_status'] = $verification_status;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}
