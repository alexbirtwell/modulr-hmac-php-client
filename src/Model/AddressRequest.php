<?php
/**
 * AddressRequest.
 *
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swaagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Modulr API.
 *
 * Modulo API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrowdProperty\ModulrHmacPhpClient\Model;

use ArrayAccess;

/**
 * AddressRequest Class Doc Comment.
 *
 * @category    Class
 *
 * @author      Swagger Codegen team
 *
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AddressRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'AddressRequest';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'address_line1' => 'string',
        'address_line2' => 'string',
        'country'       => 'string',
        'post_code'     => 'string',
        'post_town'     => 'string',
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'country'       => 'country',
        'post_code'     => 'postCode',
        'post_town'     => 'postTown',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'country'       => 'setCountry',
        'post_code'     => 'setPostCode',
        'post_town'     => 'setPostTown',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'country'       => 'getCountry',
        'post_code'     => 'getPostCode',
        'post_town'     => 'getPostTown',
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const COUNTRY_AT = 'AT';
    const COUNTRY_BE = 'BE';
    const COUNTRY_BG = 'BG';
    const COUNTRY_CY = 'CY';
    const COUNTRY_CZ = 'CZ';
    const COUNTRY_DK = 'DK';
    const COUNTRY_EE = 'EE';
    const COUNTRY_FI = 'FI';
    const COUNTRY_FR = 'FR';
    const COUNTRY_DE = 'DE';
    const COUNTRY_GR = 'GR';
    const COUNTRY_HU = 'HU';
    const COUNTRY_IS = 'IS';
    const COUNTRY_IE = 'IE';
    const COUNTRY_IT = 'IT';
    const COUNTRY_LV = 'LV';
    const COUNTRY_LI = 'LI';
    const COUNTRY_LT = 'LT';
    const COUNTRY_LU = 'LU';
    const COUNTRY_MT = 'MT';
    const COUNTRY_NL = 'NL';
    const COUNTRY_NO = 'NO';
    const COUNTRY_PL = 'PL';
    const COUNTRY_PT = 'PT';
    const COUNTRY_RO = 'RO';
    const COUNTRY_SK = 'SK';
    const COUNTRY_SI = 'SI';
    const COUNTRY_ES = 'ES';
    const COUNTRY_SE = 'SE';
    const COUNTRY_GB = 'GB';

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getCountryAllowableValues()
    {
        return [
            self::COUNTRY_AT,
            self::COUNTRY_BE,
            self::COUNTRY_BG,
            self::COUNTRY_CY,
            self::COUNTRY_CZ,
            self::COUNTRY_DK,
            self::COUNTRY_EE,
            self::COUNTRY_FI,
            self::COUNTRY_FR,
            self::COUNTRY_DE,
            self::COUNTRY_GR,
            self::COUNTRY_HU,
            self::COUNTRY_IS,
            self::COUNTRY_IE,
            self::COUNTRY_IT,
            self::COUNTRY_LV,
            self::COUNTRY_LI,
            self::COUNTRY_LT,
            self::COUNTRY_LU,
            self::COUNTRY_MT,
            self::COUNTRY_NL,
            self::COUNTRY_NO,
            self::COUNTRY_PL,
            self::COUNTRY_PT,
            self::COUNTRY_RO,
            self::COUNTRY_SK,
            self::COUNTRY_SI,
            self::COUNTRY_ES,
            self::COUNTRY_SE,
            self::COUNTRY_GB,
        ];
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['post_code'] = isset($data['post_code']) ? $data['post_code'] : null;
        $this->container['post_town'] = isset($data['post_town']) ? $data['post_town'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['address_line1']) && (strlen($this->container['address_line1']) > 50)) {
            $invalid_properties[] = "invalid value for 'address_line1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address_line1']) && !preg_match("/^(.*?[A-Za-z0-9]){1,}['\\.\\-\\s\\'/,()\\[\\]]*_/", $this->container['address_line1'])) {
            $invalid_properties[] = "invalid value for 'address_line1', must be conform to the pattern /^(.*?[A-Za-z0-9]){1,}['\\.\\-\\s\\'/,()\\[\\]]*_/.";
        }

        if (!is_null($this->container['address_line2']) && (strlen($this->container['address_line2']) > 50)) {
            $invalid_properties[] = "invalid value for 'address_line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address_line2']) && !preg_match("/^$|^(.*?[A-Za-z0-9]){1,}['\\.\\-\\s\\'/,()\\[\\]]*_/", $this->container['address_line2'])) {
            $invalid_properties[] = "invalid value for 'address_line2', must be conform to the pattern /^$|^(.*?[A-Za-z0-9]){1,}['\\.\\-\\s\\'/,()\\[\\]]*_/.";
        }

        $allowed_values = ['AT', 'BE', 'BG', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IS', 'IE', 'IT', 'LV', 'LI', 'LT', 'LU', 'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'GB'];
        if (!in_array($this->container['country'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'country', must be one of 'AT', 'BE', 'BG', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IS', 'IE', 'IT', 'LV', 'LI', 'LT', 'LU', 'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'GB'.";
        }

        if (!is_null($this->container['post_code']) && (strlen($this->container['post_code']) > 8)) {
            $invalid_properties[] = "invalid value for 'post_code', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['post_town']) && (strlen($this->container['post_town']) > 50)) {
            $invalid_properties[] = "invalid value for 'post_town', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['post_town']) && !preg_match("/^(.*?[A-Za-z0-9]){1,}[.'\\-&\\s]*_/", $this->container['post_town'])) {
            $invalid_properties[] = "invalid value for 'post_town', must be conform to the pattern /^(.*?[A-Za-z0-9]){1,}[.'\\-&\\s]*_/.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (strlen($this->container['address_line1']) > 50) {
            return false;
        }
        if (!preg_match("/^(.*?[A-Za-z0-9]){1,}['\\.\\-\\s\\'/,()\\[\\]]*_/", $this->container['address_line1'])) {
            return false;
        }
        if (strlen($this->container['address_line2']) > 50) {
            return false;
        }
        if (!preg_match("/^$|^(.*?[A-Za-z0-9]){1,}['\\.\\-\\s\\'/,()\\[\\]]*_/", $this->container['address_line2'])) {
            return false;
        }
        $allowed_values = ['AT', 'BE', 'BG', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IS', 'IE', 'IT', 'LV', 'LI', 'LT', 'LU', 'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'GB'];
        if (!in_array($this->container['country'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['post_code']) > 8) {
            return false;
        }
        if (strlen($this->container['post_town']) > 50) {
            return false;
        }
        if (!preg_match("/^(.*?[A-Za-z0-9]){1,}[.'\\-&\\s]*_/", $this->container['post_town'])) {
            return false;
        }

        return true;
    }

    /**
     * Gets address_line1.
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1.
     *
     * @param string $address_line1
     *
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        if (!is_null($address_line1) && (strlen($address_line1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling AddressRequest., must be smaller than or equal to 50.');
        }
        if (!is_null($address_line1) && (!preg_match("/^(.*?[A-Za-z0-9]){1,}['\\.\\-\\s\\'/,()\\[\\]]*_/", $address_line1))) {
            throw new \InvalidArgumentException("invalid value for $address_line1 when calling AddressRequest., must conform to the pattern /^(.*?[A-Za-z0-9]){1,}['\\.\\-\\s\\'/,()\\[\\]]*_/.");
        }

        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2.
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2.
     *
     * @param string $address_line2
     *
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        if (!is_null($address_line2) && (strlen($address_line2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_line2 when calling AddressRequest., must be smaller than or equal to 50.');
        }
        if (!is_null($address_line2) && (!preg_match("/^$|^(.*?[A-Za-z0-9]){1,}['\\.\\-\\s\\'/,()\\[\\]]*_/", $address_line2))) {
            throw new \InvalidArgumentException("invalid value for $address_line2 when calling AddressRequest., must conform to the pattern /^$|^(.*?[A-Za-z0-9]){1,}['\\.\\-\\s\\'/,()\\[\\]]*_/.");
        }

        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets country.
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country.
     *
     * @param string $country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $allowed_values = ['AT', 'BE', 'BG', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IS', 'IE', 'IT', 'LV', 'LI', 'LT', 'LU', 'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'GB'];
        if (!is_null($country) && (!in_array($country, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'country', must be one of 'AT', 'BE', 'BG', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IS', 'IE', 'IT', 'LV', 'LI', 'LT', 'LU', 'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'GB'");
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets post_code.
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code.
     *
     * @param string $post_code
     *
     * @return $this
     */
    public function setPostCode($post_code)
    {
        if (!is_null($post_code) && (strlen($post_code) > 8)) {
            throw new \InvalidArgumentException('invalid length for $post_code when calling AddressRequest., must be smaller than or equal to 8.');
        }

        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets post_town.
     *
     * @return string
     */
    public function getPostTown()
    {
        return $this->container['post_town'];
    }

    /**
     * Sets post_town.
     *
     * @param string $post_town
     *
     * @return $this
     */
    public function setPostTown($post_town)
    {
        if (!is_null($post_town) && (strlen($post_town) > 50)) {
            throw new \InvalidArgumentException('invalid length for $post_town when calling AddressRequest., must be smaller than or equal to 50.');
        }
        if (!is_null($post_town) && (!preg_match("/^(.*?[A-Za-z0-9]){1,}[.'\\-&\\s]*_/", $post_town))) {
            throw new \InvalidArgumentException("invalid value for $post_town when calling AddressRequest., must conform to the pattern /^(.*?[A-Za-z0-9]){1,}[.'\\-&\\s]*_/.");
        }

        $this->container['post_town'] = $post_town;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}
