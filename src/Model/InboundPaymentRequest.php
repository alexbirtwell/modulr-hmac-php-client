<?php
/**
 * InboundPaymentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrowdProperty\ModulrHmacPhpClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Modulr API
 *
 * Modulo API
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrowdProperty\ModulrHmacPhpClient\Model;

use \ArrayAccess;

/**
 * InboundPaymentRequest Class Doc Comment
 *
 * @category    Class
 * @package     CrowdProperty\ModulrHmacPhpClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InboundPaymentRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InboundPaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'amount' => 'double',
        'number_of_transactions' => 'int',
        'payer_detail' => '\CrowdProperty\ModulrHmacPhpClient\Model\PartyDetail',
        'transaction_date' => 'string',
        'type' => 'string',
        'description' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'amount' => 'amount',
        'number_of_transactions' => 'numberOfTransactions',
        'payer_detail' => 'payerDetail',
        'transaction_date' => 'transactionDate',
        'type' => 'type',
        'description' => 'description'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'amount' => 'setAmount',
        'number_of_transactions' => 'setNumberOfTransactions',
        'payer_detail' => 'setPayerDetail',
        'transaction_date' => 'setTransactionDate',
        'type' => 'setType',
        'description' => 'setDescription'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'amount' => 'getAmount',
        'number_of_transactions' => 'getNumberOfTransactions',
        'payer_detail' => 'getPayerDetail',
        'transaction_date' => 'getTransactionDate',
        'type' => 'getType',
        'description' => 'getDescription'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_PI_BACS = 'PI_BACS';
    const TYPE_PI_FP = 'PI_FP';
    const TYPE_PI_DD = 'PI_DD';
    const TYPE_PO_REV = 'PO_REV';
    const TYPE_PI_FAST = 'PI_FAST';
    const TYPE_INT_INTERC = 'INT_INTERC';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PI_BACS,
            self::TYPE_PI_FP,
            self::TYPE_PI_DD,
            self::TYPE_PO_REV,
            self::TYPE_PI_FAST,
            self::TYPE_INT_INTERC,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['number_of_transactions'] = isset($data['number_of_transactions']) ? $data['number_of_transactions'] : null;
        $this->container['payer_detail'] = isset($data['payer_detail']) ? $data['payer_detail'] : null;
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['account_id'] === null) {
            $invalid_properties[] = "'account_id' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalid_properties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] > 2147483647)) {
            $invalid_properties[] = "invalid value for 'amount', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['amount'] < 0.01)) {
            $invalid_properties[] = "invalid value for 'amount', must be bigger than or equal to 0.01.";
        }

        if (!is_null($this->container['number_of_transactions']) && ($this->container['number_of_transactions'] > 50)) {
            $invalid_properties[] = "invalid value for 'number_of_transactions', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['number_of_transactions']) && ($this->container['number_of_transactions'] < 1)) {
            $invalid_properties[] = "invalid value for 'number_of_transactions', must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["PI_BACS", "PI_FP", "PI_DD", "PO_REV", "PI_FAST", "INT_INTERC"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of 'PI_BACS', 'PI_FP', 'PI_DD', 'PO_REV', 'PI_FAST', 'INT_INTERC'.";
        }

        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ((strlen($this->container['description']) > 255)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['account_id'] === null) {
            return false;
        }
        if ($this->container['amount'] === null) {
            return false;
        }
        if ($this->container['amount'] > 2147483647) {
            return false;
        }
        if ($this->container['amount'] < 0.01) {
            return false;
        }
        if ($this->container['number_of_transactions'] > 50) {
            return false;
        }
        if ($this->container['number_of_transactions'] < 1) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["PI_BACS", "PI_FP", "PI_DD", "PO_REV", "PI_FAST", "INT_INTERC"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if (strlen($this->container['description']) > 255) {
            return false;
        }
        return true;
    }


    /**
     * Gets account_id
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param string $account_id The account to be credited
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets amount
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param double $amount Amount of the payment in major current Units - '1' = 1.00 GBP
     * @return $this
     */
    public function setAmount($amount)
    {

        if (($amount > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling InboundPaymentRequest., must be smaller than or equal to 2147483647.');
        }
        if (($amount < 0.01)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling InboundPaymentRequest., must be bigger than or equal to 0.01.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets number_of_transactions
     * @return int
     */
    public function getNumberOfTransactions()
    {
        return $this->container['number_of_transactions'];
    }

    /**
     * Sets number_of_transactions
     * @param int $number_of_transactions Number of credit transactions to create, defaults to 1
     * @return $this
     */
    public function setNumberOfTransactions($number_of_transactions)
    {

        if (!is_null($number_of_transactions) && ($number_of_transactions > 50)) {
            throw new \InvalidArgumentException('invalid value for $number_of_transactions when calling InboundPaymentRequest., must be smaller than or equal to 50.');
        }
        if (!is_null($number_of_transactions) && ($number_of_transactions < 1)) {
            throw new \InvalidArgumentException('invalid value for $number_of_transactions when calling InboundPaymentRequest., must be bigger than or equal to 1.');
        }

        $this->container['number_of_transactions'] = $number_of_transactions;

        return $this;
    }

    /**
     * Gets payer_detail
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\PartyDetail
     */
    public function getPayerDetail()
    {
        return $this->container['payer_detail'];
    }

    /**
     * Sets payer_detail
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\PartyDetail $payer_detail Payer details. Mandatory
     * @return $this
     */
    public function setPayerDetail($payer_detail)
    {
        $this->container['payer_detail'] = $payer_detail;

        return $this;
    }

    /**
     * Gets transaction_date
     * @return string
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     * @param string $transaction_date Date of credit in yyyy-MM-ddTHH:mm:ssZ format
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Type of credit, values:
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('PI_BACS', 'PI_FP', 'PI_DD', 'PO_REV', 'PI_FAST', 'INT_INTERC');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'PI_BACS', 'PI_FP', 'PI_DD', 'PO_REV', 'PI_FAST', 'INT_INTERC'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Description of the credit
     * @return $this
     */
    public function setDescription($description)
    {
        if ((strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling InboundPaymentRequest., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CrowdProperty\ModulrHmacPhpClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


