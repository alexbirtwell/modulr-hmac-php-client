<?php
/**
 * RuleApi
 * PHP version 5.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Modulr API.
 *
 * Modulo API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrowdProperty\ModulrHmacPhpClient\Api;

use CrowdProperty\ModulrHmacPhpClient\ApiClient;
use CrowdProperty\ModulrHmacPhpClient\ApiException;

/**
 * RuleApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RuleApi
{
    /**
     * API Client.
     *
     * @var \CrowdProperty\ModulrHmacPhpClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor.
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CrowdProperty\ModulrHmacPhpClient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client.
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client.
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\ApiClient $apiClient set the API client
     *
     * @return RuleApi
     */
    public function setApiClient(\CrowdProperty\ModulrHmacPhpClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;

        return $this;
    }

    /**
     * Operation createRuleUsingPOST.
     *
     * Create Rule
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\CreateRuleRequest $create_rule_request create rule request (optional)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse
     */
    public function createRuleUsingPOST($create_rule_request = null)
    {
        list($response) = $this->createRuleUsingPOSTWithHttpInfo($create_rule_request);

        return $response;
    }

    /**
     * Operation createRuleUsingPOSTWithHttpInfo.
     *
     * Create Rule
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\CreateRuleRequest $create_rule_request create rule request (optional)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return array of \CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRuleUsingPOSTWithHttpInfo($create_rule_request = null)
    {
        // parse inputs
        $resourcePath = '/rules';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_rule_request)) {
            $_tempBody = $create_rule_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse',
                '/rules'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRuleUsingGET.
     *
     * Get Rule
     *
     * @param string $aid   Id of Account to get Rule of (required)
     * @param string $rtype rtype (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse
     */
    public function getRuleUsingGET($aid, $rtype)
    {
        list($response) = $this->getRuleUsingGETWithHttpInfo($aid, $rtype);

        return $response;
    }

    /**
     * Operation getRuleUsingGETWithHttpInfo.
     *
     * Get Rule
     *
     * @param string $aid   Id of Account to get Rule of (required)
     * @param string $rtype rtype (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return array of \CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRuleUsingGETWithHttpInfo($aid, $rtype)
    {
        // verify the required parameter 'aid' is set
        if ($aid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $aid when calling getRuleUsingGET');
        }
        // verify the required parameter 'rtype' is set
        if ($rtype === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rtype when calling getRuleUsingGET');
        }
        // parse inputs
        $resourcePath = '/accounts/{aid}/rules/{rtype}';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($aid !== null) {
            $resourcePath = str_replace(
                '{'.'aid'.'}',
                $this->apiClient->getSerializer()->toPathValue($aid),
                $resourcePath
            );
        }
        // path params
        if ($rtype !== null) {
            $resourcePath = str_replace(
                '{'.'rtype'.'}',
                $this->apiClient->getSerializer()->toPathValue($rtype),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse',
                '/accounts/{aid}/rules/{rtype}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRulesUsingGET.
     *
     * Get Rules
     *
     * @param string $aid   Id of Account to get Rules of (required)
     * @param int    $page  Page to fetch (0 indexed) (optional)
     * @param int    $size  Size of Page to fetch (optional, default to 20)
     * @param string $rtype Filter to a specific RuleType (optional)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\PageResponseRuleResponse_
     */
    public function getRulesUsingGET($aid, $page = null, $size = null, $rtype = null)
    {
        list($response) = $this->getRulesUsingGETWithHttpInfo($aid, $page, $size, $rtype);

        return $response;
    }

    /**
     * Operation getRulesUsingGETWithHttpInfo.
     *
     * Get Rules
     *
     * @param string $aid   Id of Account to get Rules of (required)
     * @param int    $page  Page to fetch (0 indexed) (optional)
     * @param int    $size  Size of Page to fetch (optional, default to 20)
     * @param string $rtype Filter to a specific RuleType (optional)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return array of \CrowdProperty\ModulrHmacPhpClient\Model\PageResponseRuleResponse_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRulesUsingGETWithHttpInfo($aid, $page = null, $size = null, $rtype = null)
    {
        // verify the required parameter 'aid' is set
        if ($aid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $aid when calling getRulesUsingGET');
        }
        // parse inputs
        $resourcePath = '/accounts/{aid}/rules';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($rtype !== null) {
            $queryParams['rtype'] = $this->apiClient->getSerializer()->toQueryValue($rtype);
        }
        // path params
        if ($aid !== null) {
            $resourcePath = str_replace(
                '{'.'aid'.'}',
                $this->apiClient->getSerializer()->toPathValue($aid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CrowdProperty\ModulrHmacPhpClient\Model\PageResponseRuleResponse_',
                '/accounts/{aid}/rules'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CrowdProperty\ModulrHmacPhpClient\Model\PageResponseRuleResponse_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\PageResponseRuleResponse_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modifyRuleUsingPUT.
     *
     * Edit Rule
     *
     * @param string                                                     $rid               Id of Rule to be edited (required)
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\CreateRuleRequest $edit_rule_request edit rule request (optional)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse
     */
    public function modifyRuleUsingPUT($rid, $edit_rule_request = null)
    {
        list($response) = $this->modifyRuleUsingPUTWithHttpInfo($rid, $edit_rule_request);

        return $response;
    }

    /**
     * Operation modifyRuleUsingPUTWithHttpInfo.
     *
     * Edit Rule
     *
     * @param string                                                     $rid               Id of Rule to be edited (required)
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\CreateRuleRequest $edit_rule_request edit rule request (optional)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return array of \CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyRuleUsingPUTWithHttpInfo($rid, $edit_rule_request = null)
    {
        // verify the required parameter 'rid' is set
        if ($rid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rid when calling modifyRuleUsingPUT');
        }
        // parse inputs
        $resourcePath = '/rules/{rid}';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // path params
        if ($rid !== null) {
            $resourcePath = str_replace(
                '{'.'rid'.'}',
                $this->apiClient->getSerializer()->toPathValue($rid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($edit_rule_request)) {
            $_tempBody = $edit_rule_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse',
                '/rules/{rid}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\RuleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeRulesUsingDELETE.
     *
     * Delete Rules
     *
     * @param string[] $r_ids Id(s) of Rules to delete (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return object
     */
    public function removeRulesUsingDELETE($r_ids)
    {
        list($response) = $this->removeRulesUsingDELETEWithHttpInfo($r_ids);

        return $response;
    }

    /**
     * Operation removeRulesUsingDELETEWithHttpInfo.
     *
     * Delete Rules
     *
     * @param string[] $r_ids Id(s) of Rules to delete (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeRulesUsingDELETEWithHttpInfo($r_ids)
    {
        // verify the required parameter 'r_ids' is set
        if ($r_ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $r_ids when calling removeRulesUsingDELETE');
        }
        // parse inputs
        $resourcePath = '/rules';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($r_ids)) {
            $r_ids = $this->apiClient->getSerializer()->serializeCollection($r_ids, 'multi', true);
        }
        if ($r_ids !== null) {
            $queryParams['rIds'] = $this->apiClient->getSerializer()->toQueryValue($r_ids);
        }
        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/rules'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 207:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\MessageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
