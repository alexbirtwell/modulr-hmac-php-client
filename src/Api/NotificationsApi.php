<?php
/**
 * NotificationsApi
 * PHP version 5.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Modulr API.
 *
 * Modulo API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrowdProperty\ModulrHmacPhpClient\Api;

use CrowdProperty\ModulrHmacPhpClient\ApiClient;
use CrowdProperty\ModulrHmacPhpClient\ApiException;

/**
 * NotificationsApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationsApi
{
    /**
     * API Client.
     *
     * @var \CrowdProperty\ModulrHmacPhpClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor.
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CrowdProperty\ModulrHmacPhpClient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client.
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client.
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\ApiClient $apiClient set the API client
     *
     * @return NotificationsApi
     */
    public function setApiClient(\CrowdProperty\ModulrHmacPhpClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;

        return $this;
    }

    /**
     * Operation createWebhook.
     *
     * Creates webhook
     *
     * @param string                                                  $cid     Id of Customer to create webhook for (required)
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\WebHookRequest $webhook Details of webhook to create (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\WebHookResponse
     */
    public function createWebhook($cid, $webhook)
    {
        list($response) = $this->createWebhookWithHttpInfo($cid, $webhook);

        return $response;
    }

    /**
     * Operation createWebhookWithHttpInfo.
     *
     * Creates webhook
     *
     * @param string                                                  $cid     Id of Customer to create webhook for (required)
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\WebHookRequest $webhook Details of webhook to create (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return array of \CrowdProperty\ModulrHmacPhpClient\Model\WebHookResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWebhookWithHttpInfo($cid, $webhook)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cid when calling createWebhook');
        }
        // verify the required parameter 'webhook' is set
        if ($webhook === null) {
            throw new \InvalidArgumentException('Missing the required parameter $webhook when calling createWebhook');
        }
        // parse inputs
        $resourcePath = '/customers/{cid}/webhooks';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{'.'cid'.'}',
                $this->apiClient->getSerializer()->toPathValue($cid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($webhook)) {
            $_tempBody = $webhook;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CrowdProperty\ModulrHmacPhpClient\Model\WebHookResponse',
                '/customers/{cid}/webhooks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CrowdProperty\ModulrHmacPhpClient\Model\WebHookResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\WebHookResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCustomerWebHooksUsingDELETE.
     *
     * Delete Webhooks
     *
     * @param string   $cid      Id of Customer to delete WebHooks for (required)
     * @param string[] $wid_list Id(s) of WebHooks to delete, must owned by customer and active (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\MessageResponse
     */
    public function deleteCustomerWebHooksUsingDELETE($cid, $wid_list)
    {
        list($response) = $this->deleteCustomerWebHooksUsingDELETEWithHttpInfo($cid, $wid_list);

        return $response;
    }

    /**
     * Operation deleteCustomerWebHooksUsingDELETEWithHttpInfo.
     *
     * Delete Webhooks
     *
     * @param string   $cid      Id of Customer to delete WebHooks for (required)
     * @param string[] $wid_list Id(s) of WebHooks to delete, must owned by customer and active (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return array of \CrowdProperty\ModulrHmacPhpClient\Model\MessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomerWebHooksUsingDELETEWithHttpInfo($cid, $wid_list)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cid when calling deleteCustomerWebHooksUsingDELETE');
        }
        // verify the required parameter 'wid_list' is set
        if ($wid_list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wid_list when calling deleteCustomerWebHooksUsingDELETE');
        }
        // parse inputs
        $resourcePath = '/customers/{cid}/webhooks';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($wid_list)) {
            $wid_list = $this->apiClient->getSerializer()->serializeCollection($wid_list, 'multi', true);
        }
        if ($wid_list !== null) {
            $queryParams['widList'] = $this->apiClient->getSerializer()->toQueryValue($wid_list);
        }
        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{'.'cid'.'}',
                $this->apiClient->getSerializer()->toPathValue($cid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CrowdProperty\ModulrHmacPhpClient\Model\MessageResponse',
                '/customers/{cid}/webhooks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CrowdProperty\ModulrHmacPhpClient\Model\MessageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\MessageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 207:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\MessageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomerWebHooksUsingGET.
     *
     * Get webHooks
     *
     * @param string $cid Id of Customer to get webhooks for (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\WebHookResponse[]
     */
    public function getCustomerWebHooksUsingGET($cid)
    {
        list($response) = $this->getCustomerWebHooksUsingGETWithHttpInfo($cid);

        return $response;
    }

    /**
     * Operation getCustomerWebHooksUsingGETWithHttpInfo.
     *
     * Get webHooks
     *
     * @param string $cid Id of Customer to get webhooks for (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return array of \CrowdProperty\ModulrHmacPhpClient\Model\WebHookResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerWebHooksUsingGETWithHttpInfo($cid)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cid when calling getCustomerWebHooksUsingGET');
        }
        // parse inputs
        $resourcePath = '/customers/{cid}/webhooks';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{'.'cid'.'}',
                $this->apiClient->getSerializer()->toPathValue($cid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CrowdProperty\ModulrHmacPhpClient\Model\WebHookResponse[]',
                '/customers/{cid}/webhooks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CrowdProperty\ModulrHmacPhpClient\Model\WebHookResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\WebHookResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFailedWebHooksUsingGET.
     *
     * Get failed webHook posts
     *
     * @param string $id   Id of Webhook (required)
     * @param string $from Failed since Date. Needs to be urlEncoded value (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\WebHookFailureResponse[]
     */
    public function getFailedWebHooksUsingGET($id, $from)
    {
        list($response) = $this->getFailedWebHooksUsingGETWithHttpInfo($id, $from);

        return $response;
    }

    /**
     * Operation getFailedWebHooksUsingGETWithHttpInfo.
     *
     * Get failed webHook posts
     *
     * @param string $id   Id of Webhook (required)
     * @param string $from Failed since Date. Needs to be urlEncoded value (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return array of \CrowdProperty\ModulrHmacPhpClient\Model\WebHookFailureResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFailedWebHooksUsingGETWithHttpInfo($id, $from)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFailedWebHooksUsingGET');
        }
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from when calling getFailedWebHooksUsingGET');
        }
        // parse inputs
        $resourcePath = '/webhooks/{id}/failures';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CrowdProperty\ModulrHmacPhpClient\Model\WebHookFailureResponse[]',
                '/webhooks/{id}/failures'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CrowdProperty\ModulrHmacPhpClient\Model\WebHookFailureResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\WebHookFailureResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
