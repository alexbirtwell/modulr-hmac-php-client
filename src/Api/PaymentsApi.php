<?php
/**
 * PaymentsApi
 * PHP version 5.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Modulr API.
 *
 * Modulo API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrowdProperty\ModulrHmacPhpClient\Api;

use CrowdProperty\ModulrHmacPhpClient\ApiClient;
use CrowdProperty\ModulrHmacPhpClient\ApiException;

/**
 * PaymentsApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsApi
{
    /**
     * API Client.
     *
     * @var \CrowdProperty\ModulrHmacPhpClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor.
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CrowdProperty\ModulrHmacPhpClient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client.
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client.
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\ApiClient $apiClient set the API client
     *
     * @return PaymentsApi
     */
    public function setApiClient(\CrowdProperty\ModulrHmacPhpClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;

        return $this;
    }

    /**
     * Operation getBatchDetails.
     *
     * Gives details of a batch
     *
     * @param string $id id given when batch request was made (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\BatchPaymentResponse
     */
    public function getBatchDetails($id)
    {
        list($response) = $this->getBatchDetailsWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation getBatchDetailsWithHttpInfo.
     *
     * Gives details of a batch
     *
     * @param string $id id given when batch request was made (required)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return array of \CrowdProperty\ModulrHmacPhpClient\Model\BatchPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBatchDetailsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getBatchDetails');
        }
        // parse inputs
        $resourcePath = '/batchpayments/{id}';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CrowdProperty\ModulrHmacPhpClient\Model\BatchPaymentResponse',
                '/batchpayments/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CrowdProperty\ModulrHmacPhpClient\Model\BatchPaymentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\BatchPaymentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPaymentsUsingGET.
     *
     * find Payments within last 7 days
     *
     * @param string   $id                 Payment id. If specified then all other parameters are ignored (optional)
     * @param string   $from_created_date  Payments created date equal or after to this date. Mandatory Parameter(except when &#39;id&#39; parameter is used) (optional)
     * @param string   $to_created_date    Payments created date equal or before to this date (optional)
     * @param string   $source_account_id  sourceAccountId (optional)
     * @param string   $external_reference externalReference (optional)
     * @param string[] $status             Payment status, multiple statuses can be specified by repeating the parameter (optional)
     * @param int      $page               Page to fetch (0 indexed) (optional)
     * @param int      $size               Size of Page to fetch (optional, default to 20)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\PageResponsePaymentResponse_
     */
    public function getPaymentsUsingGET($id = null, $from_created_date = null, $to_created_date = null, $source_account_id = null, $external_reference = null, $status = null, $page = null, $size = null)
    {
        list($response) = $this->getPaymentsUsingGETWithHttpInfo($id, $from_created_date, $to_created_date, $source_account_id, $external_reference, $status, $page, $size);

        return $response;
    }

    /**
     * Operation getPaymentsUsingGETWithHttpInfo.
     *
     * find Payments within last 7 days
     *
     * @param string   $id                 Payment id. If specified then all other parameters are ignored (optional)
     * @param string   $from_created_date  Payments created date equal or after to this date. Mandatory Parameter(except when &#39;id&#39; parameter is used) (optional)
     * @param string   $to_created_date    Payments created date equal or before to this date (optional)
     * @param string   $source_account_id  sourceAccountId (optional)
     * @param string   $external_reference externalReference (optional)
     * @param string[] $status             Payment status, multiple statuses can be specified by repeating the parameter (optional)
     * @param int      $page               Page to fetch (0 indexed) (optional)
     * @param int      $size               Size of Page to fetch (optional, default to 20)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return array of \CrowdProperty\ModulrHmacPhpClient\Model\PageResponsePaymentResponse_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentsUsingGETWithHttpInfo($id = null, $from_created_date = null, $to_created_date = null, $source_account_id = null, $external_reference = null, $status = null, $page = null, $size = null)
    {
        // parse inputs
        $resourcePath = '/payments';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($from_created_date !== null) {
            $queryParams['fromCreatedDate'] = $this->apiClient->getSerializer()->toQueryValue($from_created_date);
        }
        // query params
        if ($to_created_date !== null) {
            $queryParams['toCreatedDate'] = $this->apiClient->getSerializer()->toQueryValue($to_created_date);
        }
        // query params
        if ($source_account_id !== null) {
            $queryParams['sourceAccountId'] = $this->apiClient->getSerializer()->toQueryValue($source_account_id);
        }
        // query params
        if ($external_reference !== null) {
            $queryParams['externalReference'] = $this->apiClient->getSerializer()->toQueryValue($external_reference);
        }
        // query params
        if (is_array($status)) {
            $status = $this->apiClient->getSerializer()->serializeCollection($status, 'multi', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CrowdProperty\ModulrHmacPhpClient\Model\PageResponsePaymentResponse_',
                '/payments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CrowdProperty\ModulrHmacPhpClient\Model\PageResponsePaymentResponse_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\PageResponsePaymentResponse_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation sendPaymentUsingPOST.
     *
     * Submit payment request
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\PaymentOutRequest $payment_request Details of Payment request (optional)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\PaymentResponse
     */
    public function sendPaymentUsingPOST($payment_request = null)
    {
        list($response) = $this->sendPaymentUsingPOSTWithHttpInfo($payment_request);

        return $response;
    }

    /**
     * Operation sendPaymentUsingPOSTWithHttpInfo.
     *
     * Submit payment request
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\PaymentOutRequest $payment_request Details of Payment request (optional)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return array of \CrowdProperty\ModulrHmacPhpClient\Model\PaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendPaymentUsingPOSTWithHttpInfo($payment_request = null)
    {
        // parse inputs
        $resourcePath = '/payments';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payment_request)) {
            $_tempBody = $payment_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CrowdProperty\ModulrHmacPhpClient\Model\PaymentResponse',
                '/payments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CrowdProperty\ModulrHmacPhpClient\Model\PaymentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\PaymentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation submitBatchPaymentsUsingPOST.
     *
     * Submit batch payment requests
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\BatchPaymentOutRequest $batch_payment_request Details of Batch request (optional)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return \CrowdProperty\ModulrHmacPhpClient\Model\BatchPaymentResponse
     */
    public function submitBatchPaymentsUsingPOST($batch_payment_request = null)
    {
        list($response) = $this->submitBatchPaymentsUsingPOSTWithHttpInfo($batch_payment_request);

        return $response;
    }

    /**
     * Operation submitBatchPaymentsUsingPOSTWithHttpInfo.
     *
     * Submit batch payment requests
     *
     * @param \CrowdProperty\ModulrHmacPhpClient\Model\BatchPaymentOutRequest $batch_payment_request Details of Batch request (optional)
     *
     * @throws \CrowdProperty\ModulrHmacPhpClient\ApiException on non-2xx response
     *
     * @return array of \CrowdProperty\ModulrHmacPhpClient\Model\BatchPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitBatchPaymentsUsingPOSTWithHttpInfo($batch_payment_request = null)
    {
        // parse inputs
        $resourcePath = '/batchpayments';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($batch_payment_request)) {
            $_tempBody = $batch_payment_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CrowdProperty\ModulrHmacPhpClient\Model\BatchPaymentResponse',
                '/batchpayments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CrowdProperty\ModulrHmacPhpClient\Model\BatchPaymentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CrowdProperty\ModulrHmacPhpClient\Model\BatchPaymentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
